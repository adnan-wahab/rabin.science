"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// getValue takes an array of points returns a value to sort the bins on.
// by default it returns the number of points
// this is where to pass in a function to color the bins by
// avg/mean/max of specific value of the point
var defaultGetValue = function defaultGetValue(points) {
  return points.length;
};

var BinSorter = function () {
  function BinSorter() {
    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var getValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetValue;

    _classCallCheck(this, BinSorter);

    this.sortedBins = this.getSortedBins(bins, getValue);
    this.maxCount = this.getMaxCount();
  }

  /**
   * Get an array of object with sorted values and index of bins
   * @param {Array} bins
   * @param {Function} getValue
   * @return {Array} array of values and index lookup
   */


  _createClass(BinSorter, [{
    key: "getSortedBins",
    value: function getSortedBins(bins, getValue) {
      return bins.map(function (h, i) {
        return { i: i, value: getValue(h.points), counts: h.points.length };
      }).sort(function (a, b) {
        return a.value - b.value;
      });
    }

    /**
     * Get range of values of all bins
     * @param {Number[]} range
     * @param {Number} range[0] - lower bound
     * @param {Number} range[1] - upper bound
     * @return {Array} array of new value range
     */

  }, {
    key: "getValueRange",
    value: function getValueRange(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          lower = _ref2[0],
          upper = _ref2[1];

      var len = this.sortedBins.length;
      if (!len) {
        return [0, 0];
      }
      var lowerIdx = Math.ceil(lower / 100 * (len - 1));
      var upperIdx = Math.floor(upper / 100 * (len - 1));

      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];
    }

    /**
     * Get ths max count of all bins
     * @return {Number | Boolean} max count
     */

  }, {
    key: "getMaxCount",
    value: function getMaxCount() {
      return Math.max.apply(null, this.sortedBins.map(function (b) {
        return b.counts;
      }));
    }
  }]);

  return BinSorter;
}();

exports.default = BinSorter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9iaW4tc29ydGVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRHZXRWYWx1ZSIsInBvaW50cyIsImxlbmd0aCIsIkJpblNvcnRlciIsImJpbnMiLCJnZXRWYWx1ZSIsInNvcnRlZEJpbnMiLCJnZXRTb3J0ZWRCaW5zIiwibWF4Q291bnQiLCJnZXRNYXhDb3VudCIsIm1hcCIsImgiLCJpIiwidmFsdWUiLCJjb3VudHMiLCJzb3J0IiwiYSIsImIiLCJsb3dlciIsInVwcGVyIiwibGVuIiwibG93ZXJJZHgiLCJNYXRoIiwiY2VpbCIsInVwcGVySWR4IiwiZmxvb3IiLCJtYXgiLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxrQkFBa0IsU0FBbEJBLGVBQWtCO0FBQUEsU0FBVUMsT0FBT0MsTUFBakI7QUFBQSxDQUF4Qjs7SUFFcUJDLFM7QUFDbkIsdUJBQW1EO0FBQUEsUUFBdkNDLElBQXVDLHVFQUFoQyxFQUFnQztBQUFBLFFBQTVCQyxRQUE0Qix1RUFBakJMLGVBQWlCOztBQUFBOztBQUNqRCxTQUFLTSxVQUFMLEdBQWtCLEtBQUtDLGFBQUwsQ0FBbUJILElBQW5CLEVBQXlCQyxRQUF6QixDQUFsQjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0IsS0FBS0MsV0FBTCxFQUFoQjtBQUNEOztBQUVEOzs7Ozs7Ozs7O2tDQU1jTCxJLEVBQU1DLFEsRUFBVTtBQUM1QixhQUFPRCxLQUNKTSxHQURJLENBQ0EsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVyxFQUFDQSxJQUFELEVBQUlDLE9BQU9SLFNBQVNNLEVBQUVWLE1BQVgsQ0FBWCxFQUErQmEsUUFBUUgsRUFBRVYsTUFBRixDQUFTQyxNQUFoRCxFQUFYO0FBQUEsT0FEQSxFQUVKYSxJQUZJLENBRUMsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsZUFBVUQsRUFBRUgsS0FBRixHQUFVSSxFQUFFSixLQUF0QjtBQUFBLE9BRkQsQ0FBUDtBQUdEOztBQUVEOzs7Ozs7Ozs7O3dDQU84QjtBQUFBO0FBQUEsVUFBZkssS0FBZTtBQUFBLFVBQVJDLEtBQVE7O0FBQzVCLFVBQU1DLE1BQU0sS0FBS2QsVUFBTCxDQUFnQkosTUFBNUI7QUFDQSxVQUFJLENBQUNrQixHQUFMLEVBQVU7QUFDUixlQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBUDtBQUNEO0FBQ0QsVUFBTUMsV0FBV0MsS0FBS0MsSUFBTCxDQUFVTCxRQUFRLEdBQVIsSUFBZUUsTUFBTSxDQUFyQixDQUFWLENBQWpCO0FBQ0EsVUFBTUksV0FBV0YsS0FBS0csS0FBTCxDQUFXTixRQUFRLEdBQVIsSUFBZUMsTUFBTSxDQUFyQixDQUFYLENBQWpCOztBQUVBLGFBQU8sQ0FBQyxLQUFLZCxVQUFMLENBQWdCZSxRQUFoQixFQUEwQlIsS0FBM0IsRUFBa0MsS0FBS1AsVUFBTCxDQUFnQmtCLFFBQWhCLEVBQTBCWCxLQUE1RCxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7a0NBSWM7QUFDWixhQUFPUyxLQUFLSSxHQUFMLENBQVNDLEtBQVQsQ0FBZSxJQUFmLEVBQXFCLEtBQUtyQixVQUFMLENBQWdCSSxHQUFoQixDQUFvQjtBQUFBLGVBQUtPLEVBQUVILE1BQVA7QUFBQSxPQUFwQixDQUFyQixDQUFQO0FBQ0Q7Ozs7OztrQkExQ2tCWCxTIiwiZmlsZSI6ImJpbi1zb3J0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLy8gZ2V0VmFsdWUgdGFrZXMgYW4gYXJyYXkgb2YgcG9pbnRzIHJldHVybnMgYSB2YWx1ZSB0byBzb3J0IHRoZSBiaW5zIG9uLlxuLy8gYnkgZGVmYXVsdCBpdCByZXR1cm5zIHRoZSBudW1iZXIgb2YgcG9pbnRzXG4vLyB0aGlzIGlzIHdoZXJlIHRvIHBhc3MgaW4gYSBmdW5jdGlvbiB0byBjb2xvciB0aGUgYmlucyBieVxuLy8gYXZnL21lYW4vbWF4IG9mIHNwZWNpZmljIHZhbHVlIG9mIHRoZSBwb2ludFxuY29uc3QgZGVmYXVsdEdldFZhbHVlID0gcG9pbnRzID0+IHBvaW50cy5sZW5ndGg7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpblNvcnRlciB7XG4gIGNvbnN0cnVjdG9yKGJpbnMgPSBbXSwgZ2V0VmFsdWUgPSBkZWZhdWx0R2V0VmFsdWUpIHtcbiAgICB0aGlzLnNvcnRlZEJpbnMgPSB0aGlzLmdldFNvcnRlZEJpbnMoYmlucywgZ2V0VmFsdWUpO1xuICAgIHRoaXMubWF4Q291bnQgPSB0aGlzLmdldE1heENvdW50KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIG9iamVjdCB3aXRoIHNvcnRlZCB2YWx1ZXMgYW5kIGluZGV4IG9mIGJpbnNcbiAgICogQHBhcmFtIHtBcnJheX0gYmluc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRWYWx1ZVxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgdmFsdWVzIGFuZCBpbmRleCBsb29rdXBcbiAgICovXG4gIGdldFNvcnRlZEJpbnMoYmlucywgZ2V0VmFsdWUpIHtcbiAgICByZXR1cm4gYmluc1xuICAgICAgLm1hcCgoaCwgaSkgPT4gKHtpLCB2YWx1ZTogZ2V0VmFsdWUoaC5wb2ludHMpLCBjb3VudHM6IGgucG9pbnRzLmxlbmd0aH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEudmFsdWUgLSBiLnZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmFuZ2Ugb2YgdmFsdWVzIG9mIGFsbCBiaW5zXG4gICAqIEBwYXJhbSB7TnVtYmVyW119IHJhbmdlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYW5nZVswXSAtIGxvd2VyIGJvdW5kXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYW5nZVsxXSAtIHVwcGVyIGJvdW5kXG4gICAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBuZXcgdmFsdWUgcmFuZ2VcbiAgICovXG4gIGdldFZhbHVlUmFuZ2UoW2xvd2VyLCB1cHBlcl0pIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLnNvcnRlZEJpbnMubGVuZ3RoO1xuICAgIGlmICghbGVuKSB7XG4gICAgICByZXR1cm4gWzAsIDBdO1xuICAgIH1cbiAgICBjb25zdCBsb3dlcklkeCA9IE1hdGguY2VpbChsb3dlciAvIDEwMCAqIChsZW4gLSAxKSk7XG4gICAgY29uc3QgdXBwZXJJZHggPSBNYXRoLmZsb29yKHVwcGVyIC8gMTAwICogKGxlbiAtIDEpKTtcblxuICAgIHJldHVybiBbdGhpcy5zb3J0ZWRCaW5zW2xvd2VySWR4XS52YWx1ZSwgdGhpcy5zb3J0ZWRCaW5zW3VwcGVySWR4XS52YWx1ZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRocyBtYXggY291bnQgb2YgYWxsIGJpbnNcbiAgICogQHJldHVybiB7TnVtYmVyIHwgQm9vbGVhbn0gbWF4IGNvdW50XG4gICAqL1xuICBnZXRNYXhDb3VudCgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcy5zb3J0ZWRCaW5zLm1hcChiID0+IGIuY291bnRzKSk7XG4gIH1cbn1cbiJdfQ==